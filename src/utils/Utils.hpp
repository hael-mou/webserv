//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä          ìêì  Utils.hpp ìêî           
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
//  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä  Student: oezzaou <oezzaou@student.1337.ma> 
//  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
//  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
//  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á     Created: 2024/05/15 11:58:00 by oezzaou
//  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á     Updated: 2024/05/30 14:05:50 by hael-mou
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                             
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                            
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                        ìÑÇ oussama ezzaouìÜÉ
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              

#ifndef   __UTILS_HPP__
# define   __UTILS_HPP__

/*******************************************************************************
    * Includes :
*******************************************************************************/
# include "shared_ptr.hpp"
# include "typedefs.hpp"

# include <netinet/in.h> 
# include <unistd.h>
# include <sstream>
# include <string>
# include <ctime>

# include <sys/types.h>
# include <sys/socket.h>
# include <arpa/inet.h>
# include <fcntl.h>
# include <netdb.h>

/*******************************************************************************
    * string Utils :
*******************************************************************************/
namespace str
{
    std::string    strtrim(const_string& str);
    std::string    toLower(const_string& str);
    StringPair     lineToPair(const_string& line, const char sep);
    StringVector   split(const_string str, const char sep);
    std::string    addrtoString(const in_addr_t& addr, const socklen_t& addrLen);
    std::string&   replace(std::string& str, const_string& from, const_string& to);

    template <typename T>
    std::string    to_string(const T& number)
    {
        std::ostringstream oss;
        oss << number;
        return oss.str();
    }

};

/*******************************************************************************
    * integer Utils :
*******************************************************************************/
namespace integer
{
    int     strToInt(const_string& str);   
};

/*******************************************************************************
    * Logger Utils :
*******************************************************************************/
namespace Logger
{
    void         log(const_string& level, const_string& message, int fd = 1);
    std::string  getcurrentTime(void);
};

/*******************************************************************************
    * Socket Utils :
*******************************************************************************/
namespace sock
{
    Handle  createSocket(int family, int type, int protocol);
    void    bind(Handle socket, const_string& host, const_string& port);
    void    startListening(Handle socket, int backlog = 10);
    void    setReuseAddr(Handle& socket);
    void    setNonBlocking(Handle& socket);

}

/*******************************************************************************
 * Http Utils :
********************************************************************************/
namespace httptools
{
    bool    isSpecialChars(const char &c);
    bool    isValidHeader(const char &c);
    void    httpDecoder(std::string &str);


    enum HttpSpecialChars{
    Dot                 = '.',
    Dash                =  '-',
    Plus                = '+',
    Comma               = ',',
    Slash               = '/',
    Colon               = ':',
    Space               = ' ',
    Equals              = '=',
    Asterisk            = '*',
    Ampersand           = '&',
    Underscore          ='_',
    QuestionMark        = '?',
    ExclamationMark     = '!',
    LeftCurlyBracket    = '{',
    LeftSquareBracket   = '[',
    RightCurlyBracket   = '}',
    RightSquareBracket  = ']',
    };
}

#endif /* __UTILS_HPP__ */
